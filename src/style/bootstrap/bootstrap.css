/* Error: Undefined mixin.
 *    ,
 * 5  | /   @include media-breakpoint-up($breakpoint) {
 * 6  | |     $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
 * 7  | | 
 * 8  | |     // Loop over each utility property
 * 9  | |     @each $key, $utility in $utilities {
 * 10 | |       // The utility can be disabled with `false`, thus check if the utility is a map first
 * 11 | |       // Only proceed if responsive media queries are enabled or if it's the base media query
 * 12 | |       @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {
 * 13 | |         @include generate-utility($utility, $infix);
 * 14 | |       }
 * 15 | |     }
 * 16 | \   }
 *    '
 *   src/style/utilities/_api.scss 5:3  @import
 *   src/style/bootstrap.scss 16:9      root stylesheet */

body::before {
  font-family: "Source Code Pro", "SF Mono", Monaco, Inconsolata, "Fira Mono",
      "Droid Sans Mono", monospace, monospace;
  white-space: pre;
  display: block;
  padding: 1em;
  margin-bottom: 1em;
  border-bottom: 2px solid black;
  content: "Error: Undefined mixin.\a    \2577 \a 5  \2502  \250c    @include media-breakpoint-up($breakpoint) {\a 6  \2502  \2502      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\a 7  \2502  \2502  \a 8  \2502  \2502      // Loop over each utility property\a 9  \2502  \2502      @each $key, $utility in $utilities {\a 10 \2502  \2502        // The utility can be disabled with `false`, thus check if the utility is a map first\a 11 \2502  \2502        // Only proceed if responsive media queries are enabled or if it's the base media query\a 12 \2502  \2502        @if type-of($utility) == \"map\" and (map-get($utility, responsive) or $infix == \"\") {\a 13 \2502  \2502          @include generate-utility($utility, $infix);\a 14 \2502  \2502        }\a 15 \2502  \2502      }\a 16 \2502  \2514    }\a    \2575 \a   src/style/utilities/_api.scss 5:3  @import\a   src/style/bootstrap.scss 16:9      root stylesheet";
}
